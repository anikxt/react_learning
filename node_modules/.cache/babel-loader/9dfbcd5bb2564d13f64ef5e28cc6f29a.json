{"ast":null,"code":"var _jsxFileName = \"/home/blaze/Desktop/web_dev/learning_react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Counter from './Counter';\nimport CounterHooks from './CounterHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/React.createContext();\n\nfunction App() {\n  _s();\n\n  console.log('Render App');\n  const [theme, setTheme] = useState('redto change */');\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      backgroundColor: theme\n    },\n    children: [\"Counter\", /*#__PURE__*/_jsxDEV(Counter, {\n      initialCount: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), \"Counter Hooks\", /*#__PURE__*/_jsxDEV(CounterHooks, {\n      initialCount: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setTheme(prevTheme => {\n        return prevTheme === 'red' ? 'blue' : 'red';\n      }),\n      children: \"Toggle Theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Bws9qFphOXTKdw8lokVA7nov5qE=\");\n\n_c = App;\nexport default App;\n/* rendering html inside of div is fairly complex using normal JS, but here's the trick, \nwe have something called JSX in React which essentially let's us write HTML inside of JavaScript */\n\n/* () allows to indent our code onto multiple line to make it more readable.\n() also allows us to return mutiple different sets of code deeply nested inside each other */\n\n/* <> </> these empty elements essentially allows us to return multiple things\nand not actually have them wrapped in anything at all */\n\n/* React allows us to pass information to a Component using something called props (stands for properties).\nProps are basically kind of global variable or object.  \nThe way you set props on the react component is the exact same way you set an attribute in an HTML */\n\n/* If you want to make our site reactive and actually change to the changes that are happening to our site we need to use whats called 'state'.\n'state' is really magical because every single time you change the state inside of your component it's going to re-render that entire component to make it work with the state that you just changed. */\n\n/* Context API allows us to deeply pass our props into a bunch of different components at once without having to manually pass it through every single time\nIt is really useful for deeply nested components that all need to access a specific variable or prop thats from a top level component.\nIt kind of works like a global variable that is only global to everything inside of app, \nbecause global variable aren't really possible when using modules inside of react, \nso context is really a great way to do that without to create an actual global variable or manually pass down the prop to every single child that needs it */\n\n/* Context essentially has two portions to it ->\n- Provider : providing the value to everything inside of it\n- Consumer : it's just consuming that value */\n\n/* When you change your context it doesn't actually re-render your application,\nyou need to use state in order to re-render your application in order to change your context */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/blaze/Desktop/web_dev/learning_react/src/App.js"],"names":["React","useState","Counter","CounterHooks","ThemeContext","createContext","App","console","log","theme","setTheme","backgroundColor","prevTheme"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,OAAO,MAAMC,YAAY,gBAAGJ,KAAK,CAACK,aAAN,EAArB;;AAEP,SAASC,GAAT,GAAe;AAAA;;AACbC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,iBAAD,CAAlC;AACA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEU,MAAAA,eAAe,EAAEF;AAAnB,KAA9B;AAAA,uCAEE,QAAC,OAAD;AAAS,MAAA,YAAY,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,gCAIE,QAAC,YAAD;AAAc,MAAA,YAAY,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AACE,MAAA,OAAO,EAAE,MACPC,QAAQ,CAAEE,SAAD,IAAe;AACtB,eAAOA,SAAS,KAAK,KAAd,GAAsB,MAAtB,GAA+B,KAAtC;AACD,OAFO,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GApBQN,G;;KAAAA,G;AAsBT,eAAeA,GAAf;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport Counter from './Counter';\nimport CounterHooks from './CounterHooks';\n\nexport const ThemeContext = React.createContext();\n\nfunction App() {\n  console.log('Render App');\n  const [theme, setTheme] = useState('redto change */');\n  return (\n    <ThemeContext.Provider value={{ backgroundColor: theme }}>\n      Counter\n      <Counter initialCount={0} />\n      Counter Hooks\n      <CounterHooks initialCount={0} />\n      <button\n        onClick={() =>\n          setTheme((prevTheme) => {\n            return prevTheme === 'red' ? 'blue' : 'red';\n          })\n        }\n      >\n        Toggle Theme\n      </button>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n\n/* rendering html inside of div is fairly complex using normal JS, but here's the trick, \nwe have something called JSX in React which essentially let's us write HTML inside of JavaScript */\n\n/* () allows to indent our code onto multiple line to make it more readable.\n() also allows us to return mutiple different sets of code deeply nested inside each other */\n\n/* <> </> these empty elements essentially allows us to return multiple things\nand not actually have them wrapped in anything at all */\n\n/* React allows us to pass information to a Component using something called props (stands for properties).\nProps are basically kind of global variable or object.  \nThe way you set props on the react component is the exact same way you set an attribute in an HTML */\n\n/* If you want to make our site reactive and actually change to the changes that are happening to our site we need to use whats called 'state'.\n'state' is really magical because every single time you change the state inside of your component it's going to re-render that entire component to make it work with the state that you just changed. */\n\n/* Context API allows us to deeply pass our props into a bunch of different components at once without having to manually pass it through every single time\nIt is really useful for deeply nested components that all need to access a specific variable or prop thats from a top level component.\nIt kind of works like a global variable that is only global to everything inside of app, \nbecause global variable aren't really possible when using modules inside of react, \nso context is really a great way to do that without to create an actual global variable or manually pass down the prop to every single child that needs it */\n\n/* Context essentially has two portions to it ->\n- Provider : providing the value to everything inside of it\n- Consumer : it's just consuming that value */\n\n/* When you change your context it doesn't actually re-render your application,\nyou need to use state in order to re-render your application in order to change your context */\n"]},"metadata":{},"sourceType":"module"}