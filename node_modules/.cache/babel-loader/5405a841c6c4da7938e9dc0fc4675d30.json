{"ast":null,"code":"var _jsxFileName = \"/home/blaze/Desktop/web_dev/learning_react/src/App.js\";\nimport React from 'react';\nimport Counter from './Counter';\nimport CounterHooks from './CounterHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Counter\", /*#__PURE__*/_jsxDEV(Counter, {\n      initialCount: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), \"Counter Hooks\", /*#__PURE__*/_jsxDEV(CounterHooks, {\n      initialCount: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n/* rendering html inside of div is fairly complex using normal JS, but here's the trick, \nwe have something called JSX in React which essentially let's us write HTML inside of JavaScript */\n\n/* () allows to indent our code onto multiple line to make it more readable.\n() also allows us to return mutiple different sets of code deeply nested inside each other */\n\n/* <> </> these empty elements essentially allows us to return multiple things\nand not actually have them wrapped in anything at all */\n\n/* React allows us to pass information to a Component using something called props (stands for properties).\nProps are basically kind of global variable or object.  \nThe way you set props on the react component is the exact same way you set an attribute in an HTML */\n\n/* If you want to make our site reactive and actually change to the changes that are happening to our site we need to use whats called 'state'.\n'state' is really magical because every single time you change the state inside of your component it's going to re-render that entire component to make it work with the state that you just changed. */\n\n/* Context allows us to deeply pass our props into a bunch of different components at once without having to manually pass it through every single time\nIt is really useful for deeply nested components that all need to access a specific variable or prop thats from a top level component. */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/blaze/Desktop/web_dev/learning_react/src/App.js"],"names":["React","Counter","CounterHooks","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE;AAAA,uCAEE,QAAC,OAAD;AAAS,MAAA,YAAY,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,gCAIE,QAAC,YAAD;AAAc,MAAA,YAAY,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAQD;;KATQA,G;AAWT,eAAeA,GAAf;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","sourcesContent":["import React from 'react';\nimport Counter from './Counter';\nimport CounterHooks from './CounterHooks';\n\nfunction App() {\n  return (\n    <>\n      Counter\n      <Counter initialCount={0} />\n      Counter Hooks\n      <CounterHooks initialCount={0} />\n    </>\n  );\n}\n\nexport default App;\n\n/* rendering html inside of div is fairly complex using normal JS, but here's the trick, \nwe have something called JSX in React which essentially let's us write HTML inside of JavaScript */\n\n/* () allows to indent our code onto multiple line to make it more readable.\n() also allows us to return mutiple different sets of code deeply nested inside each other */\n\n/* <> </> these empty elements essentially allows us to return multiple things\nand not actually have them wrapped in anything at all */\n\n/* React allows us to pass information to a Component using something called props (stands for properties).\nProps are basically kind of global variable or object.  \nThe way you set props on the react component is the exact same way you set an attribute in an HTML */\n\n/* If you want to make our site reactive and actually change to the changes that are happening to our site we need to use whats called 'state'.\n'state' is really magical because every single time you change the state inside of your component it's going to re-render that entire component to make it work with the state that you just changed. */\n\n/* Context allows us to deeply pass our props into a bunch of different components at once without having to manually pass it through every single time\nIt is really useful for deeply nested components that all need to access a specific variable or prop thats from a top level component. */\n"]},"metadata":{},"sourceType":"module"}